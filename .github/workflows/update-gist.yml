name: Update Latest Gist

on:
  schedule:
    # Runs every day at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Fetch and Filter Gists
      id: gists
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GIST_TOKEN }}
        script: |
          // Fetch more gists to find the ones with prefixes
          const gists = await github.rest.gists.listForUser({
            username: 'hew',
            per_page: 30  // Fetch enough to find prefixed ones
          });

          let latestBlog = null;
          let reels = [];

          for (const gist of gists.data) {
            const desc = gist.description || '';

            // Find latest blog post
            if (!latestBlog && desc.startsWith('[blog]')) {
              latestBlog = {
                title: desc.replace('[blog]', '').trim() || Object.keys(gist.files)[0],
                url: gist.html_url,
                description: desc.replace('[blog]', '').trim()
              };
            }

            // Find reel items (up to 3)
            if (reels.length < 3 && desc.startsWith('[reel]')) {
              reels.push({
                title: desc.replace('[reel]', '').trim() || Object.keys(gist.files)[0],
                url: gist.html_url
              });
            }

            // Stop if we have everything we need
            if (latestBlog && reels.length >= 3) {
              break;
            }
          }

          // Format outputs for use in bash
          if (latestBlog) {
            core.setOutput('blog_title', latestBlog.title);
            core.setOutput('blog_url', latestBlog.url);
            core.setOutput('blog_description', latestBlog.description.length > 100 ?
              latestBlog.description.substring(0, 97) + '...' :
              latestBlog.description);
          }

          // Output reels as JSON string
          core.setOutput('reels', JSON.stringify(reels));

    - name: Update README
      if: steps.gists.outputs.blog_url || steps.gists.outputs.reels != '[]'
      run: |
        # Read the README
        README_PATH="README.md"

        # If README.md doesn't exist in the repo root (for profile repos), create it
        if [ ! -f "$README_PATH" ]; then
          cp README-GITHUB-PROFILE.md README.md
          README_PATH="README.md"
        fi

        # Create the blog content
        if [ -n "${{ steps.gists.outputs.blog_url }}" ]; then
          BLOG_CONTENT="### üìù [${{ steps.gists.outputs.blog_title }}](${{ steps.gists.outputs.blog_url }})\n*${{ steps.gists.outputs.blog_description }}*"
        else
          BLOG_CONTENT="*No blog posts yet*"
        fi

        # Create the reels content
        REELS_JSON='${{ steps.gists.outputs.reels }}'
        if [ "$REELS_JSON" != "[]" ] && [ -n "$REELS_JSON" ]; then
          REELS_CONTENT=""
          echo "$REELS_JSON" | jq -r '.[] | "- [\(.title)](\(.url))"' | while read -r line; do
            REELS_CONTENT="${REELS_CONTENT}${line}\n"
          done
          # Use a different approach with jq
          REELS_CONTENT=$(echo "$REELS_JSON" | jq -r '.[] | "- [\(.title)](\(.url))"' | sed ':a;N;$!ba;s/\n/\\n/g')
        else
          REELS_CONTENT="*No reels*"
        fi

        # Update the blog section
        sed -i '/<!-- BLOG:START -->/,/<!-- BLOG:END -->/c\<!-- BLOG:START -->\n'"$BLOG_CONTENT"'\n<!-- BLOG:END -->' "$README_PATH"

        # Update the reel section
        sed -i '/<!-- REEL:START -->/,/<!-- REEL:END -->/c\<!-- REEL:START -->\n'"$REELS_CONTENT"'\n<!-- REEL:END -->' "$README_PATH"

    - name: Commit and Push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update blog and reels content" && git push)